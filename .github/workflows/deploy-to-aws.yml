name: Deploy Multi-Agent System to AWS

on:
  push:
    branches: [main]
    paths:
      - 'agents/**'
      - 'config/**'
      - 'utils/**'
      - 'infrastructure/**'
      - 'multi_agent_system.py'
      - 'cloud_api.py'
      - 'requirements-cloud.txt'
      - 'Dockerfile.cloud'
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: multi-agent-system
  ECS_SERVICE: multi-agent-system-service
  ECS_CLUSTER: multi-agent-system-cluster
  CONTAINER_NAME: multi-agent-system

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-cloud.txt
          pip install pytest pytest-asyncio

      - name: Run tests
        run: |
          pytest test_claude_integration.py -v
          python -c "from multi_agent_system import MultiAgentSystem; print('Multi-agent system imports successfully')"

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build Docker image (no cache to ensure clean build)
          docker build --no-cache -f Dockerfile.cloud -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest

          # Push images to ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Update ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: infrastructure/ecs-task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: always()
    steps:
      - name: Deployment Success
        if: needs.build-and-deploy.result == 'success'
        run: |
          echo "✅ Multi-agent system deployed successfully to AWS!"
          echo "The system is now running in the cloud and ready to develop applications."

      - name: Deployment Failed
        if: needs.build-and-deploy.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          echo "Please check the logs and fix any issues."
          exit 1