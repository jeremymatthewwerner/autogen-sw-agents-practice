name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  AWS_REGION: 'us-east-1'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio pytest-mock

    - name: Run unit tests
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        PYTHONPATH: ${{ github.workspace }}
      run: |
        pytest tests/unit/ -v --cov=agents --cov=utils --cov=multi_agent_system --cov-report=xml --cov-report=term

    - name: Run integration tests
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        PYTHONPATH: ${{ github.workspace }}
      run: |
        pytest tests/integration/ -v -m integration

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install playwright pytest pytest-asyncio
        playwright install chromium

    - name: Start application
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        PYTHONPATH: ${{ github.workspace }}
      run: |
        uvicorn app:app --host 0.0.0.0 --port 8000 &
        sleep 5
        # Wait for server to be ready
        timeout 30 bash -c 'until curl -f http://localhost:8000/status > /dev/null 2>&1; do sleep 1; done' || echo "Warning: Server may not be fully ready"

    - name: Run E2E tests
      env:
        PYTHONPATH: ${{ github.workspace }}
      run: |
        pytest tests/e2e/ -v -m e2e

  quality-checks:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy

    - name: Run Black
      run: black --check .

    - name: Run isort
      run: isort --check-only .

    - name: Run flake8
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Run type checking with mypy
      run: mypy . --ignore-missing-imports || true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        severity: 'CRITICAL,HIGH'

    - name: Check for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.before }}
        head: ${{ github.sha }}

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, quality-checks]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ steps.login-ecr.outputs.registry }}/multi-agent-system:latest
          ${{ steps.login-ecr.outputs.registry }}/multi-agent-system:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: Deploy to AWS ECS
    runs-on: ubuntu-latest
    needs: [build-docker, e2e-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: http://multi-agent-system-alb-1995918544.us-east-1.elb.amazonaws.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Update ECS service
      run: |
        aws ecs update-service \
          --cluster multi-agent-cluster \
          --service multi-agent-service \
          --force-new-deployment \
          --region ${{ env.AWS_REGION }}

    - name: Wait for service stability
      run: |
        aws ecs wait services-stable \
          --cluster multi-agent-cluster \
          --services multi-agent-service \
          --region ${{ env.AWS_REGION }}

    - name: Verify deployment
      run: |
        curl -f http://multi-agent-system-alb-1995918544.us-east-1.elb.amazonaws.com/status || exit 1

  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()

    steps:
    - name: Send notification
      run: |
        echo "Deployment status: ${{ job.status }}"
        # Add Slack/Discord/Email notification here